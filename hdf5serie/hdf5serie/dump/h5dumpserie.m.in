function [D,L]=h5dumpserie(filedata)
% Usage: [D,L]=h5dumpserie(filedata)
%   filedata is the full parameter string of the native program h5dumpserie
%   See h5dumpserie('-h') for a desciption of the h5dumpserie program.
%   The generated data table from the h5dumpserie program is returned by D
%   as a matrix.
%   The column header labels are returned by L as a cell array of strings.

% get h5dumpserie
H5DUMPSERIE=getenv('HDF5SERIEBINDIR');
if size(H5DUMPSERIE, 2)<=0
  H5DUMPSERIE='@native_prefix@/bin/h5dumpserie'; % installation default
  if exist(H5DUMPSERIE)!=2, H5DUMPSERIE=[fileparts(which(mfilename)) '/../../../bin/h5dumpserie']; end
else
  H5DUMPSERIE=[H5DUMPSERIE '/h5dumpserie']; % from environment
end

% output help
if strcmp(filedata, '-h') || strcmp(filedata, '--help')
  system([H5DUMPSERIE ' -h']);
  HDF5SERIEBINDIR
  D=[];
  return
end

% check for write permission
TMP=tempname('/dev/shm');
fid=fopen(TMP, 'w');
if fid>0
  fclose(fid);
else
  TMP=tempname('/tmp');
  fid=fopen(TMP, 'w');
  if fid>0
    fclose(fid);
  else
    TMP=tempname('.');
    fid=fopen(TMP, 'w');
    if fid>0
      fclose(fid);
    else
      D=[];
      error('No write permission found!');
    end
  end
end

% run h5dumpserie executable
system([H5DUMPSERIE ' ' filedata ' > ' TMP]);

% load data from temp file
D=load(TMP);

% get labels
L=[];
f=fopen(TMP, 'r');
while 1
  line=fgetl(f);
  if regexp(line, "^# +[0-9]+:")>0, break; end
end
for i=1:size(D,2)
  [s,e]=regexp(line, "^# +[0-9]+:");
  L=[L; line(e+1:end)];
  line=fgetl(f);
end
fclose(f);
L=cellstr(L);

% remove temp file
delete(TMP);
